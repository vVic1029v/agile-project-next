
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  userType      UserType
  facultyMember FacultyMember?
  student       Student?
  events        Event[]        @relation("UserEvents")
  profileImage  String?
  news          News[]         @relation("UserNews") 
}

model Student {
  id          String          @id @default(uuid())
  homeClassId String?
  homeClass   HomeClass?      @relation(fields: [homeClassId], references: [id])
  user        User            @relation(fields: [id], references: [id])
  courses     StudentCourse[]
}

model FacultyMember {
  id            String     @id @default(uuid())
  titles        String?
  courses       Course[]
  user          User       @relation(fields: [id], references: [id])
  homeroomClass HomeClass? 
}

model HomeClass {
  id                      String         @id @default(uuid())
  name                    String
  startYear               Int
  courses                 Course[]
  homeroomFacultyMemberId String        @unique
  homeroomFacultyMember   FacultyMember @relation(fields: [homeroomFacultyMemberId], references: [id])
  students                Student[]
  schedule                TimeSlot[]

  announcements  Announcement[] @relation("AnnouncementHomeClass")
}

model Course {
  id              String          @id @default(uuid())
  subject         String
  facultyMemberId String
  facultyMember   FacultyMember   @relation(fields: [facultyMemberId], references: [id])
  homeClassId     String?
  homeClass       HomeClass?      @relation(fields: [homeClassId], references: [id])
  events          Event[]
  students        StudentCourse[]
  timeSlots       TimeSlot[]

  color           String?
}

model StudentCourse {
  studentId String
  courseId  String
  role      CourseUserRole @default(MEMBER)
  course    Course         @relation(fields: [courseId], references: [id])
  student   Student        @relation(fields: [studentId], references: [id])

  @@id([studentId, courseId])
}

model TimeSlot {
  id          String      @id @default(uuid())

  dayOfWeek   Int       
  periodOfDay Int?   
  startHour   Int       
  startMinute Int       
  endHour     Int       
  endMinute   Int       

  courseId    String
  homeClassId String?
  events      Event[]
  course      Course      @relation(fields: [courseId], references: [id])
  homeClass   HomeClass?  @relation(fields: [homeClassId], references: [id])
}

model Event {
  id          String    @id @default(uuid())
  title       String
  type        EventType
  description String?


  timeSlotId  String
  timeSlot    TimeSlot @relation(fields: [timeSlotId], references: [id])
  weekNumber  Int
  yearNumber  Int


  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  users       User[]    @relation("UserEvents")
}
model Announcement {
  id          String      @id @default(uuid())
  title       String
  content     String
  date        DateTime
  allUsers    Boolean     @default(false)  
  homeClasses HomeClass[]   @relation("AnnouncementHomeClass")
}
model News {
 id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String?  
  date      DateTime @default(now())
  authorId  String   
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, name: "UserNews")
}



enum UserType {
  STUDENT
  FACULTYMEMBER
  ADMIN
}

enum CourseUserRole {
  MEMBER
  MODERATOR
}

enum EventType {
  HOMEWORK
  TEST
  MISC
}
